{"version":3,"sources":["components/Form/Form.js","components/Form/index.js","components/Reset.js","components/Round/RoundTitle/index.js","components/Match/MatchComplete.js","components/Player/Player.js","components/Match/index.js","components/Match/Match.js","components/Round/RoundResults/index.js","components/Round/RoundResults/RoundResults.js","components/Round/index.js","components/Round/Round.js","components/Print.js","components/app/App.js","components/app/index.js","serviceWorker.js","data/initial.js","data/functions/draw.js","data/functions/roundsRemaining.js","index.js","data/reducer.js","data/functions/checkRoundFin.js","data/functions/winCheck.js","data/functions/score.js","data/functions/selectWinners.js"],"names":["Form","props","state","names","toggleHover","numOfPlayers","rules","scoreToWin","alternateServe","handleChange","bind","addPlayer","handleSubmit","setScoreToWin","setAlternateServe","e","this","setState","currentTarget","value","preventDefault","length","submitSetup","field","selectedValue","namesCopy","i","push","filter","_","index","input","updatednames","inputs","key","onChange","placeholder","maxLength","required","namesFilled","every","name","className","htmlFor","map","handleNumOfPlayers","onClick","onPointerEnter","onPointerLeave","disabled","Component","connect","dispatch","type","Reset","handleClick","setup","RoundTitle","roundsRemaining","title","MatchComplete","player1","player2","winner","score","Player","player","gameId","handleScore","serving","id","games","game","playerId","player1Serving","record","handleDraw","handleNewGame","makeTable","Fragment","Table","striped","bordered","hover","match","oneWon","prize","makeRows","roundFin","Match","Print","window","print","App","Boolean","location","hostname","initial","randomName","pool","Math","floor","random","draw","newGames","a","b","splice","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","matchComplete","round","unshift","checkRoundFin","updatedGames","winCheck","dueceZone","service","winners","reduce","current","selectWinners","submit","reset","persistState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.91f79376.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n//using a class based component here to make use of the local state.\n\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n\n    //local state tracks the values that the users as submitted for simplicity,\n    //rather than update the gobal state everytime\n    this.state = {\n      names: [\"\", \"\"],\n      toggleHover: false,\n      numOfPlayers: 2,\n      rules: {\n        scoreToWin: this.props.rules.scoreToWin,\n        alternateServe: this.props.rules.alternateServe,\n      },\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addPlayer = this.addPlayer.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.setScoreToWin = this.setScoreToWin.bind(this);\n    this.setAlternateServe = this.setAlternateServe.bind(this);\n    this.toggleHover = this.toggleHover.bind(this);\n  }\n\n  setAlternateServe(e) {\n    this.setState({\n      rules: {\n        ...this.state.rules,\n        alternateServe: e.currentTarget.value,\n      },\n    });\n  }\n  setScoreToWin(e) {\n    this.setState({\n      rules: {\n        ...this.state.rules,\n        scoreToWin: e.currentTarget.value,\n      },\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.names.length % 2 === 0) {\n      this.props.submitSetup(this.state);\n    }\n  }\n  addPlayer(e) {\n    e.preventDefault();\n    const { names, field } = this.state;\n    if (field !== \"\") {\n      this.setState({\n        names: [...names, field],\n      });\n    }\n  }\n\n  handleNumOfPlayers(e) {\n    const { names, numOfPlayers } = this.state;\n    let selectedValue = e.currentTarget.value;\n    let namesCopy = [...this.state.names];\n    //make sure they array the data type string for the correct number of names\n    //otherwise we could have an array with undefined values.\n    if (selectedValue > numOfPlayers) {\n      for (let i = namesCopy.length; i < selectedValue; i += 1) {\n        namesCopy.push(\"\");\n      }\n    } else {\n      //removes additional names if we decide to have less\n      namesCopy = names.filter((_, i) => i < e.currentTarget.value);\n    }\n    this.setState({\n      names: namesCopy,\n      numOfPlayers: e.currentTarget.value,\n    });\n  }\n\n  handleChange(e, index) {\n    let input = e.currentTarget.value;\n    let updatednames = [...this.state.names];\n    updatednames[index] = input;\n    this.setState({\n      names: updatednames,\n    });\n  }\n  toggleHover() {\n    this.setState({\n      toggleHover: !this.state.toggleHover,\n    });\n  }\n\n  render() {\n    //place options in array so they can be quickly changed\n    const scoreToWinOptions = [21, 11, 7];\n    const alternateServeOptions = [5, 3, 2];\n    const numOfPlayers = [2, 4, 8];\n    const inputs = [];\n\n    //generates an array with the correct number of inputs for the desired num of players\n    for (let i = 0; i < this.state.numOfPlayers; i += 1) {\n      inputs.push(\n        <input\n          key={i}\n          onChange={(e) => this.handleChange(e, i)}\n          value={this.state.names[i]}\n          placeholder={\"Player \" + (i + 1) + \"'s name\"}\n          maxLength=\"10\"\n          required\n        />\n      );\n    }\n\n    //validation check: have they all been filled out?\n    const namesFilled = this.state.names.every((name) => name !== \"\");\n\n    return (\n      <form className={\"form\"}>\n        <div className={\"form__group\"}>\n          <label htmlFor={\"scoreToWin\"}>Score to win:</label>\n          <select\n            name=\"scoreToWin\"\n            onChange={(e) => this.setScoreToWin(e)}\n            value={this.state.rules.scoreToWin}\n          >\n            {scoreToWinOptions.map((value, i) => {\n              return (\n                <option key={i} value={value}>\n                  {value}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className={\"form__group\"}>\n          <label htmlFor={\"alternateServe\"}>Alternate serves every:</label>\n          <select\n            name=\"alternateServe\"\n            onChange={(e) => this.setAlternateServe(e)}\n            value={this.state.rules.alternateServe}\n          >\n            {alternateServeOptions.map((value, i) => {\n              return (\n                <option key={i} value={value}>\n                  {value}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className={\"form__group\"}>\n          <label htmlFor={\"numOfPlayers\"}>Number of competitors:</label>\n          <select\n            name=\"numOfPlayers\"\n            onChange={(e) => this.handleNumOfPlayers(e)}\n          >\n            {numOfPlayers.map((value, i) => {\n              return (\n                <option key={i} value={value}>\n                  {value}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n        <div className={\"form__names-container\"}>\n          {inputs.map((input) => input)}\n        </div>\n\n        {/*validation here to check that all the names have been submited*/}\n        {namesFilled ? (\n          <button className={\"button\"} onClick={(e) => this.handleSubmit(e)}>\n            submit\n          </button>\n        ) : (\n          <div\n            onPointerEnter={() => this.toggleHover()}\n            onPointerLeave={() => this.toggleHover()}\n          >\n            <button disabled>submit</button>\n          </div>\n        )}\n        <div className={\"validator\"}>\n          {this.state.toggleHover ? <p>provide names to proceed</p> : <p></p>}\n        </div>\n      </form>\n    );\n  }\n}\n","import { connect } from \"react-redux\";\nimport Form from \"./Form\";\n\nconst mapStateToProps = ({ rules }) => ({ rules });\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    submitSetup: ({ names, rules }) =>\n      dispatch({ type: \"SUBMIT\", names, rules }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\n","import React from \"react\";\n\nexport default function Reset({ handleClick, setup }) {\n  return setup ? (\n    <button className={\"button--reset\"} onClick={() => handleClick()}>\n      start over\n    </button>\n  ) : null;\n}\n","import React from \"react\";\n\nexport default function RoundTitle({ roundsRemaining }) {\n  let title = (roundsRemaining) => {\n    switch (roundsRemaining) {\n      case 3:\n        return \"Quarter Final\";\n      case 1:\n        return \"Semi Final\";\n      case 0:\n        return \"Final\";\n      default:\n        return `Rounds Remaining ${roundsRemaining}`;\n    }\n  };\n\n  return (\n    <div className={\"round-title\"}>\n      <h3>{title(roundsRemaining)}</h3>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function MatchComplete({ player1, player2, winner }) {\n  return (\n    <div className={\"match-card__complete\"}>\n      <div>\n        <p>{player1.name}</p>\n        <p>{player1.score}</p>\n      </div>\n      <div>\n        <p>\n          {winner === 1 ? player1.name : player2.name} {\"🏅\"}\n        </p>\n      </div>\n      <div>\n        <p>{player2.name}</p>\n        <p>{player2.score}</p>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function Player({ player, gameId, handleScore, serving }) {\n  return (\n    <div className={\"player \"}>\n      <h3 className={\"name info\"}>{player.name}</h3>\n      <div className={\"info\"}>{serving ? \"🏓\" : null}</div>\n      <h3 className={\"info\"}>{player.score}</h3>\n      <div className={\"score-btn_container\"}>\n        <button\n          className={\"score-btn__minus\"}\n          onClick={() => handleScore(player.id, gameId, -1)}\n        >\n          -\n        </button>\n        <button\n          className={\"score-btn__plus\"}\n          onClick={() => handleScore(player.id, gameId, 1)}\n        >\n          +\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { connect } from \"react-redux\";\nimport Game from \"./Match\";\n\nconst mapStateToProps = ({ games, rules }, { gameId }) => ({\n  game: games[gameId],\n  alternateServe: rules.alternateServe,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleScore: (playerId, gameId, value) =>\n      dispatch({ type: \"SCORE\", playerId, gameId, value }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from \"react\";\nimport MatchComplete from \"./MatchComplete\";\nimport Player from \"../Player/Player\";\n\nexport default function Game({ game, handleScore }) {\n  const { player1, player2, winner, player1Serving } = game;\n\n  return (\n    <>\n      {winner === 0 ? (\n        <div className={\"match-card\"}>\n          <Player\n            player={player1}\n            handleScore={handleScore}\n            gameId={game.id}\n            serving={player1Serving}\n          />\n\n          <Player\n            player={player2}\n            handleScore={handleScore}\n            gameId={game.id}\n            serving={!player1Serving}\n          />\n        </div>\n      ) : (\n        <MatchComplete player1={player1} player2={player2} winner={winner} />\n      )}\n    </>\n  );\n}\n","import { connect } from \"react-redux\";\nimport RoundResults from \"./RoundResults\";\n\nconst mapStateToProps = ({ roundsRemaining }, { record }) => ({\n  roundsRemaining,\n  record,\n});\n\nconst mapDisptachToProps = (dispatch) => {\n  return {\n    handleDraw: () => dispatch({ type: \"DRAW\" }),\n    handleNewGame: () => dispatch({ type: \"NEW_GAME\" }),\n  };\n};\nexport default connect(mapStateToProps, mapDisptachToProps)(RoundResults);\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport RoundTitle from \"../RoundTitle\";\n\nexport default function RoundResults({\n  roundsRemaining,\n  record,\n  handleDraw,\n  handleNewGame,\n}) {\n  const makeRows = (game) => {\n    return game.map((match) => {\n      const { player1, player2, winner } = match;\n      let oneWon = player1.score > player2.score;\n      let prize = match.roundsRemaining > 0 ? \"🏅\" : \"🏆\";\n      return (\n        <tr key={match.id}>\n          <td>{winner === 1 ? prize : null}</td>\n          <td className={!oneWon ? \"strikethrough\" : null}>{player1.name}</td>\n          <td className={!oneWon ? \"strikethrough\" : null}>{player1.score}</td>\n          <td className={oneWon ? \"strikethrough\" : null}>{player2.score}</td>\n          <td className={oneWon ? \"strikethrough\" : null}>{player2.name}</td>\n          <td>{winner === 2 ? prize : null}</td>\n        </tr>\n      );\n    });\n  };\n\n  let makeTable = (game, i) => {\n    return (\n      <React.Fragment key={i}>\n        <RoundTitle roundsRemaining={game[0].roundsRemaining} />\n        <Table striped bordered hover>\n          <tbody>{makeRows(game)}</tbody>\n        </Table>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <div className={\"round_over\"}>\n      {record.map((game, i) => {\n        return <React.Fragment key={i}>{makeTable(game)}</React.Fragment>;\n      })}\n      {roundsRemaining > 0 ? (\n        <button className={\"button\"} onClick={handleDraw}>\n          Next Round...\n        </button>\n      ) : (\n        <button className={\"button\"} onClick={handleNewGame}>\n          New Game\n        </button>\n      )}\n    </div>\n  );\n}\n","import { connect } from \"react-redux\";\nimport Round from \"./Round\";\n\nconst mapStateToProps = ({ roundsRemaining, games, roundFin, record }) => ({\n  roundsRemaining,\n  games,\n  roundFin,\n  record,\n});\n\nexport default connect(mapStateToProps)(Round);\n","import React from \"react\";\nimport RoundTitle from \"./RoundTitle\";\nimport Match from \"../Match\";\nimport RoundResults from \"./RoundResults\";\nexport default function Round({ roundsRemaining, games, roundFin, record }) {\n  return !roundFin ? (\n    <div>\n      <RoundTitle roundsRemaining={roundsRemaining} />\n      {games.map((game) => {\n        return <Match key={game.id} gameId={game.id} />;\n      })}\n    </div>\n  ) : (\n    <RoundResults record={record} />\n  );\n}\n","import React from \"react\";\n\nexport default function Print({ roundFin }) {\n  return roundFin ? (\n    <button className={\"print\"} onClick={() => window.print()}>\n      Print\n    </button>\n  ) : null;\n}\n","import React from \"react\";\nimport Form from \"../Form\";\nimport Reset from \"../Reset\";\nimport \"../../styles/main.scss\";\nimport Round from \"../Round\";\nimport Print from \"../Print\";\n\nfunction App({ setup, roundFin, handleClick }) {\n  return (\n    <div className={\"page-wrapper\"}>\n      <header className={\"header\"}>\n        <h1 className={\"title\"}>Ping Pong Tournament</h1>\n      </header>\n      {!setup ? (\n        <Form />\n      ) : (\n        <>\n          <div className={\"main\"}>\n            <Round />\n          </div>\n          <div className={\"buttons-bottom\"}>\n            <Print roundFin={roundFin} />\n            <Reset handleClick={() => handleClick()} setup={setup} />\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({ setup, roundFin, handleClick }) => ({\n  setup,\n  roundFin,\n  handleClick,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleClick: () => dispatch({ type: \"NEW_GAME\" }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initial = {\n  setup: false,\n  roundFin: false,\n  roundsRemaining: 0,\n  record: [],\n\n  rules: {\n    alternateServe: 5,\n    scoreToWin: 21,\n  },\n  games: [\n    {\n      id: 0,\n      winner: 0,\n      player1: {\n        id: 1,\n        name: \"\",\n        score: 0,\n      },\n      player2: {\n        id: 2,\n        name: \"\",\n        score: 0,\n      },\n    },\n  ],\n};\n","//Players are randomly paired to play each other.\n//The function recieves the array of names (strings) in state,\n//it then turns them into player objects with additions properties.\n//it then pairs the players randomly and puts them inside a new object called a game,\n//those game are given useful properties and stored in an array in the global state\n\n//small helper function for generating a random player index\nconst randomName = (pool) => {\n  return Math.floor(Math.random() * pool.length - 1);\n};\n\nexport const draw = (state) => {\n  //converts array of names (strings) into an array of 'player' objects\n  const pool = state.names.map((name, index) => {\n    return {\n      name,\n      score: 0,\n    };\n  });\n\n  const newGames = [];\n\n  //pair players off into games\n  if (pool.length > 1) {\n    let index = 0;\n    while (pool.length > 0) {\n      let a = randomName(pool),\n        b = randomName(pool);\n      if (a !== b) {\n        //add required properties for a new match\n        let match = {\n          //id allows the score function to identify the source of a score action\n          id: index,\n          //winner used mainly for styling and displaying results\n          winner: 0,\n          player1Serving: true,\n          //players are also given an id so the score function can identify the scorer\n          player1: { ...pool.splice(a, 1)[0], id: 1 },\n          //splice removes them from the pool so they cannot be reselected\n          player2: { ...pool.splice(b, 1)[0], id: 2 },\n          //splice return array so an index of 0 is use to return contents\n        };\n        newGames.push(match);\n        index += 1;\n      }\n    }\n  }\n\n  return {\n    ...state,\n    setup: true,\n    roundFin: false,\n    games: newGames,\n    pool,\n    names: [],\n  };\n};\n","// https://www.neelocean.com/how-many-games-in-a-tournament/#:~:text=Total%20matches%20in%20a%20knockout%20tournament%20%3D%20S%20%3D%20n%20%E2%80%93%201&text=All%20of%20that%20complicatedness%20turns,matches%20in%20a%20knockout%20tournament.\n\nexport const roundsRemaining = (state) => {\n  return {\n    ...state,\n    roundsRemaining: state.games.length - 1,\n    //number of remaining rounds of matches in KO competition is number of games - 1\n  };\n};\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport ReactDOM from \"react-dom\";\nimport { createStore, compose } from \"redux\";\nimport persistState from \"redux-localstorage\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { initial } from \"./data/initial\";\nimport { reducer } from \"./data/reducer\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, initial, composeEnhancers(persistState()));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { draw } from \"./functions/draw\";\nimport { score } from \"./functions/score\";\nimport { winCheck } from \"./functions/winCheck\";\nimport { checkRoundFin } from \"./functions/checkRoundFin\";\nimport { selectWinners } from \"./functions/selectWinners\";\nimport { roundsRemaining } from \"./functions/roundsRemaining\";\n\nimport { initial } from \"./initial\";\n\nconst submit = (state, { names, rules }) => ({\n  ...state,\n  names,\n  rules,\n});\n\n//resets but retains user's settings\nconst reset = (state, initial) => {\n  return {\n    ...initial,\n    rules: state.rules,\n  };\n};\n\n//redux reducer takes actions and returns updated state\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"SCORE\":\n      //returning state allows us to use function composition\n      return checkRoundFin(winCheck(score(state, action)));\n    case \"DRAW\":\n      return roundsRemaining(draw(selectWinners(state)));\n    case \"SUBMIT\":\n      return roundsRemaining(draw(submit(state, action)));\n    case \"NEW_GAME\":\n      //resets but retains user's settings\n      return reset(state, initial);\n    default:\n      return state;\n  }\n};\n","//checks if all matches are finished\nexport const checkRoundFin = (state) => {\n  //callback function returns boolean\n  const matchComplete = (match) => {\n    return match.winner !== 0;\n  };\n\n  //is every match finished?\n  let roundFin = state.games.every((match) => matchComplete(match));\n\n  if (roundFin) {\n    let record = [...state.record];\n    let round = state.games.map((game) => {\n      return {\n        ...game,\n        //value is stored in each object becuase the objects are inside an array\n        roundsRemaining: state.roundsRemaining,\n      };\n    });\n    //use unshift so when mapped over newest comes first\n    record.unshift(round);\n    return {\n      ...state,\n      roundFin,\n      record,\n    };\n  }\n\n  return state;\n};\n","//win checks for if a specific match has ended\nexport const winCheck = ({ state, action }) => {\n  const { games, rules } = state;\n  const { gameId } = action;\n\n  let updatedGames = games.map((game, i) => {\n    if (i === gameId) {\n      const { player1, player2 } = game;\n      //has player won with a required margin 2\n      if (\n        player1.score >= rules.scoreToWin &&\n        player1.score - player2.score > 2\n      ) {\n        return {\n          ...game,\n          winner: 1,\n        };\n      }\n      if (\n        player2.score >= rules.scoreToWin &&\n        player2.score - player1.score > 2\n      ) {\n        return {\n          ...game,\n          winner: 2,\n        };\n      }\n    }\n\n    return game;\n  });\n\n  return {\n    ...state,\n    games: updatedGames,\n    //action data no longer needed\n  };\n};\n","//adds score to player and calculates service\nexport const score = (state, action) => {\n  const { games, rules } = state;\n  const { playerId, gameId, value } = action;\n\n  let updatedGames = games.map((game, i) => {\n    //finds game which is source of action\n    if (i === gameId) {\n      const { player1, player2 } = game;\n\n      //players only get 2 serves during deuce\n      let dueceZone = rules.scoreToWin - 2;\n      let tally = player1.score + player2.score + value;\n      let numOfServes =\n        player1.score + value >= dueceZone && player2.score + value >= dueceZone\n          ? 2\n          : rules.alternateServe;\n\n      //service varible stored in global state\n      let service =\n        tally % numOfServes === 0 ? !game.player1Serving : game.player1Serving;\n\n      //amend scoring player\n      if (playerId === 1 && player1.score + value >= 0) {\n        return {\n          ...game,\n          player1Serving: service,\n          player1: {\n            ...player1,\n            score: player1.score + value,\n          },\n        };\n      } else if (player2.score + value >= 0) {\n        return {\n          ...game,\n          player1Serving: service,\n          player2: {\n            ...player2,\n            score: player2.score + value,\n          },\n        };\n      }\n    }\n    return game;\n  });\n  return {\n    state: {\n      ...state,\n      games: updatedGames,\n    },\n    //return both state and action as one object so action can be destructured in the next function\n    action,\n  };\n};\n","//creates pool from remaining players so the draw function can be reused\nexport const selectWinners = (state) => {\n  const { games } = state;\n  //reduce returns flat array of just names\n  const winners = games.reduce((pool, current) => {\n    let winner =\n      current.winner === 1 ? current.player1.name : current.player2.name;\n    pool.push(winner);\n    return pool;\n  }, []);\n\n  return {\n    ...state,\n    names: winners,\n  };\n};\n"],"sourceRoot":""}